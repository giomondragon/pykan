{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c610ec6f-d201-4992-a024-29668496ded5",
   "metadata": {},
   "outputs": [],
   "source": [
    "import sys\n",
    "import os\n",
    "\n",
    "# Get the root directory\n",
    "root_dir = os.path.abspath(os.path.join(os.getcwd(), '..'))\n",
    "\n",
    "# Add the root directory to the Python path\n",
    "sys.path.append(root_dir)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "e80c00c0-30c2-428a-ba42-f6502d4e7322",
   "metadata": {},
   "outputs": [],
   "source": [
    "from tqdm import tqdm\n",
    "from torch.utils.data import DataLoader, TensorDataset\n",
    "from torch.optim.lr_scheduler import OneCycleLR\n",
    "from sklearn.datasets import load_diabetes\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import MinMaxScaler, StandardScaler\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score\n",
    "from TINTOlib.tinto import TINTO\n",
    "from vit_pytorch.vit import ViT\n",
    "from kan import *\n",
    "\n",
    "\n",
    "import time\n",
    "import gc\n",
    "import copy\n",
    "import traceback\n",
    "import torch.nn as nn\n",
    "import cv2\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import random\n",
    "import torch.optim as optim\n",
    "import torch\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5abccec8-ddfc-48ff-b23c-27c80b033bb5",
   "metadata": {},
   "source": [
    "# 0. Set Device Cuda or CPU"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "14e1cecf-11db-4b6b-a5f3-00495d9ae846",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "cuda\n"
     ]
    }
   ],
   "source": [
    "if torch.cuda.is_available():\n",
    "  device = torch.device(\"cuda\")\n",
    "else:\n",
    "  device = torch.device(\"cpu\")\n",
    "\n",
    "print(device)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "57e53f22-1989-4ecf-a026-c1719514e039",
   "metadata": {},
   "source": [
    "## 0.1 Set Seeds"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fedd1b52-0e60-4f02-a3a5-d6169a67bf42",
   "metadata": {},
   "outputs": [],
   "source": [
    "SEED = 381\n",
    "# SET RANDOM SEED FOR REPRODUCIBILITY\n",
    "torch.manual_seed(SEED)\n",
    "random.seed(SEED)\n",
    "np.random.seed(SEED)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "12234035-fce2-4817-8ab6-1ba1a8473462",
   "metadata": {},
   "source": [
    "# 1. Load Dataframe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "77a754a9-4a2b-4cb2-a542-5acc5da802f1",
   "metadata": {},
   "outputs": [],
   "source": [
    "folder=\"data/1000-Cameras-Dataset\"\n",
    "x_col=[\"Release_date\", \"Max_resolution\", \"Low_resolution\", \"Effective_pixels\", \"Zoom\", \"Normal_focus_range\", \"Macro_focus_range\", \"Storage_included\",\"Weight\",\"Dimensions\"]\n",
    "target_col=[\"price\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "55f4e3b4-ef38-45fa-b6ad-0c25a5513034",
   "metadata": {},
   "outputs": [],
   "source": [
    "def load_and_clean(npy_filename, y_filename, x_col, target_col):\n",
    "    \"\"\"\n",
    "    Load the feature array (npy_filename) and label array (y_filename),\n",
    "    drop rows in the feature array that contain any NaNs, and apply\n",
    "    the same mask to the label array.\n",
    "    \"\"\"\n",
    "    # Load numpy arrays\n",
    "    X = np.load(os.path.join(folder, npy_filename))\n",
    "    y = np.load(os.path.join(folder, y_filename))\n",
    "    \n",
    "    # Ensure the number of rows matches between X and y\n",
    "    if X.shape[0] != y.shape[0]:\n",
    "        raise ValueError(\"The number of rows in {} and {} do not match.\".format(npy_filename, y_filename))\n",
    "    \n",
    "    # Create a boolean mask for rows that do NOT have any NaN values in X\n",
    "    valid_rows = ~np.isnan(X).any(axis=1)\n",
    "\n",
    "    # Filter both arrays using the valid_rows mask\n",
    "    X_clean = X[valid_rows]\n",
    "    y_clean = y[valid_rows]\n",
    "    \n",
    "    # Convert arrays to DataFrames\n",
    "    df_X = pd.DataFrame(X_clean)\n",
    "    df_y = pd.DataFrame(y_clean)\n",
    "    df_X.columns = x_col\n",
    "    df_y.columns = target_col\n",
    "    return df_X, df_y\n",
    "\n",
    "X_train, y_train = load_and_clean('N_train.npy', 'y_train.npy',x_col, target_col)\n",
    "X_test, y_test   = load_and_clean('N_test.npy',  'y_test.npy', x_col, target_col)\n",
    "X_val, y_val     = load_and_clean('N_val.npy',   'y_val.npy', x_col, target_col)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "35a5b50c-f795-4a23-b88e-92320d1ae157",
   "metadata": {},
   "source": [
    "## 2. Pre Process"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "aedf5f90-f6f8-4915-ac2e-5877c74cff7a",
   "metadata": {},
   "outputs": [],
   "source": [
    "def prepare_dataset(X_train, y_train, X_test, y_test, X_val, y_val, batch_size=1):\n",
    "    \"\"\"\n",
    "    Prepares the dataset from provided train, test, and validation splits.\n",
    "    Converts the inputs into PyTorch tensors (if they are not already) and loads them onto the specified device.\n",
    "    \n",
    "    Parameters:\n",
    "      X_train, y_train, X_test, y_test, X_val, y_val : array-like or torch.Tensor\n",
    "          The training, testing, and validation features and targets.\n",
    "      batch_size : int, optional\n",
    "          Batch size for DataLoader creation (default is 1).\n",
    "      \n",
    "    Returns:\n",
    "      dict:\n",
    "          A dictionary containing:\n",
    "              - 'train_input': Tensor of training features on device.\n",
    "              - 'train_label': Tensor of training targets on device.\n",
    "              - 'test_input': Tensor of testing features on device.\n",
    "              - 'test_label': Tensor of testing targets on device.\n",
    "              - 'val_input': Tensor of validation features on device.\n",
    "              - 'val_label': Tensor of validation targets on device.\n",
    "    \"\"\"\n",
    "    \n",
    "    # Convert inputs to PyTorch tensors if they aren't already\n",
    "    if not torch.is_tensor(X_train):\n",
    "        X_train = torch.tensor(X_train, dtype=torch.float32)\n",
    "    if not torch.is_tensor(y_train):\n",
    "        y_train = torch.tensor(y_train, dtype=torch.float32)\n",
    "    if not torch.is_tensor(X_test):\n",
    "        X_test = torch.tensor(X_test, dtype=torch.float32)\n",
    "    if not torch.is_tensor(y_test):\n",
    "        y_test = torch.tensor(y_test, dtype=torch.float32)\n",
    "    if not torch.is_tensor(X_val):\n",
    "        X_val = torch.tensor(X_val, dtype=torch.float32)\n",
    "    if not torch.is_tensor(y_val):\n",
    "        y_val = torch.tensor(y_val, dtype=torch.float32)\n",
    "    \n",
    "    # Create DataLoaders for each split\n",
    "    train_loader = DataLoader(TensorDataset(X_train, y_train), batch_size=batch_size)\n",
    "    test_loader  = DataLoader(TensorDataset(X_test, y_test), batch_size=batch_size)\n",
    "    val_loader   = DataLoader(TensorDataset(X_val, y_val), batch_size=batch_size)\n",
    "    \n",
    "    # Prepare empty tensors on the target device\n",
    "    train_inputs = torch.empty(0, X_train.shape[1], device=device)\n",
    "    train_labels = torch.empty(0, dtype=torch.float32, device=device)\n",
    "    test_inputs  = torch.empty(0, X_test.shape[1], device=device)\n",
    "    test_labels  = torch.empty(0, dtype=torch.float32, device=device)\n",
    "    val_inputs   = torch.empty(0, X_val.shape[1], device=device)\n",
    "    val_labels   = torch.empty(0, dtype=torch.float32, device=device)\n",
    "    \n",
    "    # Concatenate the data from the DataLoaders onto the device\n",
    "    for data, labels in tqdm(train_loader, desc=\"Processing train data\"):\n",
    "        train_inputs = torch.cat((train_inputs, data.to(device)), dim=0)\n",
    "        train_labels = torch.cat((train_labels, labels.to(device)), dim=0)\n",
    "    \n",
    "    for data, labels in tqdm(test_loader, desc=\"Processing test data\"):\n",
    "        test_inputs = torch.cat((test_inputs, data.to(device)), dim=0)\n",
    "        test_labels = torch.cat((test_labels, labels.to(device)), dim=0)\n",
    "    \n",
    "    for data, labels in tqdm(val_loader, desc=\"Processing validation data\"):\n",
    "        val_inputs = torch.cat((val_inputs, data.to(device)), dim=0)\n",
    "        val_labels = torch.cat((val_labels, labels.to(device)), dim=0)\n",
    "    \n",
    "    dataset = {\n",
    "        'train_input': train_inputs,\n",
    "        'train_label': train_labels.reshape(-1, 1),\n",
    "        'test_input': test_inputs,\n",
    "        'test_label': test_labels.reshape(-1, 1),\n",
    "        'val_input': val_inputs,\n",
    "        'val_label': val_labels.reshape(-1, 1)\n",
    "    }\n",
    "    \n",
    "    return dataset\n",
    "\n",
    "# Example usage:\n",
    "# dataset = prepare_dataset(X_train, y_train, X_test, y_test, X_val, y_val, batch_size=1)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "8d56c27b-02cd-43e0-b053-a6f071ade1fb",
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "could not determine the shape of object type 'DataFrame'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[22], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m dataset \u001b[38;5;241m=\u001b[39m prepare_dataset(X_train, y_train, X_test, y_test, X_val, y_val, batch_size\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1\u001b[39m)\n",
      "Cell \u001b[1;32mIn[21], line 25\u001b[0m, in \u001b[0;36mprepare_dataset\u001b[1;34m(X_train, y_train, X_test, y_test, X_val, y_val, batch_size)\u001b[0m\n\u001b[0;32m     23\u001b[0m \u001b[38;5;66;03m# Convert inputs to PyTorch tensors if they aren't already\u001b[39;00m\n\u001b[0;32m     24\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m torch\u001b[38;5;241m.\u001b[39mis_tensor(X_train):\n\u001b[1;32m---> 25\u001b[0m     X_train \u001b[38;5;241m=\u001b[39m torch\u001b[38;5;241m.\u001b[39mtensor(X_train, dtype\u001b[38;5;241m=\u001b[39mtorch\u001b[38;5;241m.\u001b[39mfloat32)\n\u001b[0;32m     26\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m torch\u001b[38;5;241m.\u001b[39mis_tensor(y_train):\n\u001b[0;32m     27\u001b[0m     y_train \u001b[38;5;241m=\u001b[39m torch\u001b[38;5;241m.\u001b[39mtensor(y_train, dtype\u001b[38;5;241m=\u001b[39mtorch\u001b[38;5;241m.\u001b[39mfloat32)\n",
      "\u001b[1;31mValueError\u001b[0m: could not determine the shape of object type 'DataFrame'"
     ]
    }
   ],
   "source": [
    "dataset = prepare_dataset(X_train, y_train, X_test, y_test, X_val, y_val, batch_size=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "939e5602-8371-48dc-90bb-2109e3db51b0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Release_date</th>\n",
       "      <th>Max_resolution</th>\n",
       "      <th>Low_resolution</th>\n",
       "      <th>Effective_pixels</th>\n",
       "      <th>Zoom</th>\n",
       "      <th>Normal_focus_range</th>\n",
       "      <th>Macro_focus_range</th>\n",
       "      <th>Storage_included</th>\n",
       "      <th>Weight</th>\n",
       "      <th>Dimensions</th>\n",
       "      <th>price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2000.0</td>\n",
       "      <td>3040.0</td>\n",
       "      <td>2340.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>820.0</td>\n",
       "      <td>148.0</td>\n",
       "      <td>1699.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1999.0</td>\n",
       "      <td>1152.0</td>\n",
       "      <td>640.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>43.0</td>\n",
       "      <td>50.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>40.0</td>\n",
       "      <td>300.0</td>\n",
       "      <td>128.0</td>\n",
       "      <td>1299.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2003.0</td>\n",
       "      <td>2592.0</td>\n",
       "      <td>2048.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>102.0</td>\n",
       "      <td>50.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>606.0</td>\n",
       "      <td>139.0</td>\n",
       "      <td>1399.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2006.0</td>\n",
       "      <td>2592.0</td>\n",
       "      <td>2048.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>140.0</td>\n",
       "      <td>45.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>220.0</td>\n",
       "      <td>90.0</td>\n",
       "      <td>149.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2002.0</td>\n",
       "      <td>2560.0</td>\n",
       "      <td>2048.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>190.0</td>\n",
       "      <td>50.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>32.0</td>\n",
       "      <td>659.0</td>\n",
       "      <td>162.0</td>\n",
       "      <td>149.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>658</th>\n",
       "      <td>1999.0</td>\n",
       "      <td>1280.0</td>\n",
       "      <td>640.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>105.0</td>\n",
       "      <td>90.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>700.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>169.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>659</th>\n",
       "      <td>1999.0</td>\n",
       "      <td>1600.0</td>\n",
       "      <td>1024.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>38.0</td>\n",
       "      <td>60.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>190.0</td>\n",
       "      <td>107.0</td>\n",
       "      <td>1699.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>660</th>\n",
       "      <td>2004.0</td>\n",
       "      <td>2048.0</td>\n",
       "      <td>1600.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>114.0</td>\n",
       "      <td>50.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>180.0</td>\n",
       "      <td>94.0</td>\n",
       "      <td>149.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>661</th>\n",
       "      <td>2002.0</td>\n",
       "      <td>2048.0</td>\n",
       "      <td>1024.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>80.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>320.0</td>\n",
       "      <td>116.0</td>\n",
       "      <td>177.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>662</th>\n",
       "      <td>2006.0</td>\n",
       "      <td>3648.0</td>\n",
       "      <td>2816.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>111.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>32.0</td>\n",
       "      <td>205.0</td>\n",
       "      <td>91.0</td>\n",
       "      <td>199.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>663 rows × 11 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Release_date  Max_resolution  Low_resolution  Effective_pixels   Zoom  \\\n",
       "0          2000.0          3040.0          2340.0               3.0    0.0   \n",
       "1          1999.0          1152.0           640.0               0.0   43.0   \n",
       "2          2003.0          2592.0          2048.0               5.0  102.0   \n",
       "3          2006.0          2592.0          2048.0               5.0  140.0   \n",
       "4          2002.0          2560.0          2048.0               4.0  190.0   \n",
       "..            ...             ...             ...               ...    ...   \n",
       "658        1999.0          1280.0           640.0               1.0  105.0   \n",
       "659        1999.0          1600.0          1024.0               1.0   38.0   \n",
       "660        2004.0          2048.0          1600.0               3.0  114.0   \n",
       "661        2002.0          2048.0          1024.0               3.0  100.0   \n",
       "662        2006.0          3648.0          2816.0              10.0  111.0   \n",
       "\n",
       "     Normal_focus_range  Macro_focus_range  Storage_included  Weight  \\\n",
       "0                   0.0                0.0              16.0   820.0   \n",
       "1                  50.0                0.0              40.0   300.0   \n",
       "2                  50.0                4.0               1.0   606.0   \n",
       "3                  45.0                5.0              16.0   220.0   \n",
       "4                  50.0                2.0              32.0   659.0   \n",
       "..                  ...                ...               ...     ...   \n",
       "658                90.0               25.0               4.0   700.0   \n",
       "659                60.0               15.0               8.0   190.0   \n",
       "660                50.0                2.0              16.0   180.0   \n",
       "661                80.0               10.0               8.0   320.0   \n",
       "662                 0.0                5.0              32.0   205.0   \n",
       "\n",
       "     Dimensions   price  \n",
       "0         148.0  1699.0  \n",
       "1         128.0  1299.0  \n",
       "2         139.0  1399.0  \n",
       "3          90.0   149.0  \n",
       "4         162.0   149.0  \n",
       "..          ...     ...  \n",
       "658       100.0   169.0  \n",
       "659       107.0  1699.0  \n",
       "660        94.0   149.0  \n",
       "661       116.0   177.0  \n",
       "662        91.0   199.0  \n",
       "\n",
       "[663 rows x 11 columns]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "60f19126-4e53-4ceb-a415-57b7788ea4bd",
   "metadata": {},
   "source": [
    "# 3. Create KAN Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "0eae6d85-88bd-487f-9b33-e83a67cd17c3",
   "metadata": {},
   "outputs": [],
   "source": [
    "model = KAN(width=[10, 6, 3, 1], grid=3, k=3, seed=381, device=device, auto_save=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8d3c3af2-dd9e-4ae7-80c5-00cef4822551",
   "metadata": {},
   "source": [
    "# 4. Compile and Train model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "0c32e5e6-9775-469a-9ac4-f607a799f923",
   "metadata": {},
   "outputs": [],
   "source": [
    "def load_diabetes_dataset():\n",
    "    # Load Diabetes dataset\n",
    "    diabetes = load_diabetes()\n",
    "    data = diabetes.data\n",
    "    target = diabetes.target\n",
    "\n",
    "    # Standardize the data\n",
    "    scaler = StandardScaler()\n",
    "    data = scaler.fit_transform(data)\n",
    "\n",
    "    # Convert to PyTorch tensors\n",
    "    data_tensor = torch.tensor(data, dtype=torch.float32)\n",
    "    target_tensor = torch.tensor(target, dtype=torch.float32)\n",
    "\n",
    "    # Split dataset into train and test sets\n",
    "    train_data, test_data, train_target, test_target = train_test_split(data_tensor, target_tensor, test_size=0.2, random_state=42)\n",
    "\n",
    "    # Create data loaders (optional, if you want to batch and shuffle the data)\n",
    "    train_loader = torch.utils.data.DataLoader(torch.utils.data.TensorDataset(train_data, train_target), batch_size=1)\n",
    "    test_loader = torch.utils.data.DataLoader(torch.utils.data.TensorDataset(test_data, test_target), batch_size=1)\n",
    "\n",
    "    train_inputs = torch.empty(0, data.shape[1], device=device)\n",
    "    train_labels = torch.empty(0, dtype=torch.float32, device=device)\n",
    "    test_inputs = torch.empty(0, data.shape[1], device=device)\n",
    "    test_labels = torch.empty(0, dtype=torch.float32, device=device)\n",
    "\n",
    "    # Concatenate all data into single tensors on the specified device\n",
    "    for data, labels in tqdm(train_loader):\n",
    "        train_inputs = torch.cat((train_inputs, data.to(device)), dim=0)\n",
    "        train_labels = torch.cat((train_labels, labels.to(device)), dim=0)\n",
    "\n",
    "    for data, labels in tqdm(test_loader):\n",
    "        test_inputs = torch.cat((test_inputs, data.to(device)), dim=0)\n",
    "        test_labels = torch.cat((test_labels, labels.to(device)), dim=0)\n",
    "\n",
    "    dataset = {}\n",
    "    dataset['train_input'] = train_inputs\n",
    "    dataset['test_input'] = test_inputs\n",
    "    dataset['train_label'] = train_labels.reshape(-1, 1)\n",
    "    dataset['test_label'] = test_labels.reshape(-1, 1)\n",
    "\n",
    "    return dataset\n",
    "\n",
    "# Load the Diabetes dataset\n",
    "dataset = load_diabetes_dataset()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "7178be55-fe4f-4178-a80a-fffeb86683b2",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\vgiov\\OneDrive\\Documents\\Master Data Science\\Thesis\\pykan\\kan\\MultKAN.py:816: UserWarning: std(): degrees of freedom is <= 0. Correction should be strictly less than the reduction factor (input numel divided by output numel). (Triggered internally at C:\\cb\\pytorch_1000000000000\\work\\aten\\src\\ATen\\native\\ReduceOps.cpp:1823.)\n",
      "  self.subnode_actscale.append(torch.std(x, dim=0).detach())\n",
      "C:\\Users\\vgiov\\OneDrive\\Documents\\Master Data Science\\Thesis\\pykan\\kan\\MultKAN.py:826: UserWarning: std(): degrees of freedom is <= 0. Correction should be strictly less than the reduction factor (input numel divided by output numel). (Triggered internally at C:\\cb\\pytorch_1000000000000\\work\\aten\\src\\ATen\\native\\ReduceOps.cpp:1823.)\n",
      "  input_range = torch.std(preacts, dim=0) + 0.1\n",
      "C:\\Users\\vgiov\\OneDrive\\Documents\\Master Data Science\\Thesis\\pykan\\kan\\MultKAN.py:827: UserWarning: std(): degrees of freedom is <= 0. Correction should be strictly less than the reduction factor (input numel divided by output numel). (Triggered internally at C:\\cb\\pytorch_1000000000000\\work\\aten\\src\\ATen\\native\\ReduceOps.cpp:1823.)\n",
      "  output_range_spline = torch.std(postacts_numerical, dim=0) # for training, only penalize the spline part\n",
      "C:\\Users\\vgiov\\OneDrive\\Documents\\Master Data Science\\Thesis\\pykan\\kan\\MultKAN.py:828: UserWarning: std(): degrees of freedom is <= 0. Correction should be strictly less than the reduction factor (input numel divided by output numel). (Triggered internally at C:\\cb\\pytorch_1000000000000\\work\\aten\\src\\ATen\\native\\ReduceOps.cpp:1823.)\n",
      "  output_range = torch.std(postacts, dim=0) # for visualization, include the contribution from both spline + symbolic\n",
      "C:\\Users\\vgiov\\OneDrive\\Documents\\Master Data Science\\Thesis\\pykan\\kan\\MultKAN.py:816: UserWarning: std(): degrees of freedom is <= 0. Correction should be strictly less than the reduction factor (input numel divided by output numel). (Triggered internally at C:\\cb\\pytorch_1000000000000\\work\\aten\\src\\ATen\\native\\ReduceOps.cpp:1823.)\n",
      "  self.subnode_actscale.append(torch.std(x, dim=0).detach())\n",
      "C:\\Users\\vgiov\\OneDrive\\Documents\\Master Data Science\\Thesis\\pykan\\kan\\MultKAN.py:826: UserWarning: std(): degrees of freedom is <= 0. Correction should be strictly less than the reduction factor (input numel divided by output numel). (Triggered internally at C:\\cb\\pytorch_1000000000000\\work\\aten\\src\\ATen\\native\\ReduceOps.cpp:1823.)\n",
      "  input_range = torch.std(preacts, dim=0) + 0.1\n",
      "C:\\Users\\vgiov\\OneDrive\\Documents\\Master Data Science\\Thesis\\pykan\\kan\\MultKAN.py:827: UserWarning: std(): degrees of freedom is <= 0. Correction should be strictly less than the reduction factor (input numel divided by output numel). (Triggered internally at C:\\cb\\pytorch_1000000000000\\work\\aten\\src\\ATen\\native\\ReduceOps.cpp:1823.)\n",
      "  output_range_spline = torch.std(postacts_numerical, dim=0) # for training, only penalize the spline part\n",
      "C:\\Users\\vgiov\\OneDrive\\Documents\\Master Data Science\\Thesis\\pykan\\kan\\MultKAN.py:828: UserWarning: std(): degrees of freedom is <= 0. Correction should be strictly less than the reduction factor (input numel divided by output numel). (Triggered internally at C:\\cb\\pytorch_1000000000000\\work\\aten\\src\\ATen\\native\\ReduceOps.cpp:1823.)\n",
      "  output_range = torch.std(postacts, dim=0) # for visualization, include the contribution from both spline + symbolic\n",
      "C:\\Users\\vgiov\\OneDrive\\Documents\\Master Data Science\\Thesis\\pykan\\kan\\MultKAN.py:816: UserWarning: std(): degrees of freedom is <= 0. Correction should be strictly less than the reduction factor (input numel divided by output numel). (Triggered internally at C:\\cb\\pytorch_1000000000000\\work\\aten\\src\\ATen\\native\\ReduceOps.cpp:1823.)\n",
      "  self.subnode_actscale.append(torch.std(x, dim=0).detach())\n",
      "C:\\Users\\vgiov\\OneDrive\\Documents\\Master Data Science\\Thesis\\pykan\\kan\\MultKAN.py:826: UserWarning: std(): degrees of freedom is <= 0. Correction should be strictly less than the reduction factor (input numel divided by output numel). (Triggered internally at C:\\cb\\pytorch_1000000000000\\work\\aten\\src\\ATen\\native\\ReduceOps.cpp:1823.)\n",
      "  input_range = torch.std(preacts, dim=0) + 0.1\n",
      "C:\\Users\\vgiov\\OneDrive\\Documents\\Master Data Science\\Thesis\\pykan\\kan\\MultKAN.py:827: UserWarning: std(): degrees of freedom is <= 0. Correction should be strictly less than the reduction factor (input numel divided by output numel). (Triggered internally at C:\\cb\\pytorch_1000000000000\\work\\aten\\src\\ATen\\native\\ReduceOps.cpp:1823.)\n",
      "  output_range_spline = torch.std(postacts_numerical, dim=0) # for training, only penalize the spline part\n",
      "C:\\Users\\vgiov\\OneDrive\\Documents\\Master Data Science\\Thesis\\pykan\\kan\\MultKAN.py:828: UserWarning: std(): degrees of freedom is <= 0. Correction should be strictly less than the reduction factor (input numel divided by output numel). (Triggered internally at C:\\cb\\pytorch_1000000000000\\work\\aten\\src\\ATen\\native\\ReduceOps.cpp:1823.)\n",
      "  output_range = torch.std(postacts, dim=0) # for visualization, include the contribution from both spline + symbolic\n",
      "C:\\Users\\vgiov\\OneDrive\\Documents\\Master Data Science\\Thesis\\pykan\\kan\\MultKAN.py:816: UserWarning: std(): degrees of freedom is <= 0. Correction should be strictly less than the reduction factor (input numel divided by output numel). (Triggered internally at C:\\cb\\pytorch_1000000000000\\work\\aten\\src\\ATen\\native\\ReduceOps.cpp:1823.)\n",
      "  self.subnode_actscale.append(torch.std(x, dim=0).detach())\n",
      "C:\\Users\\vgiov\\OneDrive\\Documents\\Master Data Science\\Thesis\\pykan\\kan\\MultKAN.py:826: UserWarning: std(): degrees of freedom is <= 0. Correction should be strictly less than the reduction factor (input numel divided by output numel). (Triggered internally at C:\\cb\\pytorch_1000000000000\\work\\aten\\src\\ATen\\native\\ReduceOps.cpp:1823.)\n",
      "  input_range = torch.std(preacts, dim=0) + 0.1\n",
      "C:\\Users\\vgiov\\OneDrive\\Documents\\Master Data Science\\Thesis\\pykan\\kan\\MultKAN.py:827: UserWarning: std(): degrees of freedom is <= 0. Correction should be strictly less than the reduction factor (input numel divided by output numel). (Triggered internally at C:\\cb\\pytorch_1000000000000\\work\\aten\\src\\ATen\\native\\ReduceOps.cpp:1823.)\n",
      "  output_range_spline = torch.std(postacts_numerical, dim=0) # for training, only penalize the spline part\n",
      "C:\\Users\\vgiov\\OneDrive\\Documents\\Master Data Science\\Thesis\\pykan\\kan\\MultKAN.py:828: UserWarning: std(): degrees of freedom is <= 0. Correction should be strictly less than the reduction factor (input numel divided by output numel). (Triggered internally at C:\\cb\\pytorch_1000000000000\\work\\aten\\src\\ATen\\native\\ReduceOps.cpp:1823.)\n",
      "  output_range = torch.std(postacts, dim=0) # for visualization, include the contribution from both spline + symbolic\n",
      "C:\\Users\\vgiov\\OneDrive\\Documents\\Master Data Science\\Thesis\\pykan\\kan\\MultKAN.py:816: UserWarning: std(): degrees of freedom is <= 0. Correction should be strictly less than the reduction factor (input numel divided by output numel). (Triggered internally at C:\\cb\\pytorch_1000000000000\\work\\aten\\src\\ATen\\native\\ReduceOps.cpp:1823.)\n",
      "  self.subnode_actscale.append(torch.std(x, dim=0).detach())\n",
      "C:\\Users\\vgiov\\OneDrive\\Documents\\Master Data Science\\Thesis\\pykan\\kan\\MultKAN.py:826: UserWarning: std(): degrees of freedom is <= 0. Correction should be strictly less than the reduction factor (input numel divided by output numel). (Triggered internally at C:\\cb\\pytorch_1000000000000\\work\\aten\\src\\ATen\\native\\ReduceOps.cpp:1823.)\n",
      "  input_range = torch.std(preacts, dim=0) + 0.1\n",
      "C:\\Users\\vgiov\\OneDrive\\Documents\\Master Data Science\\Thesis\\pykan\\kan\\MultKAN.py:827: UserWarning: std(): degrees of freedom is <= 0. Correction should be strictly less than the reduction factor (input numel divided by output numel). (Triggered internally at C:\\cb\\pytorch_1000000000000\\work\\aten\\src\\ATen\\native\\ReduceOps.cpp:1823.)\n",
      "  output_range_spline = torch.std(postacts_numerical, dim=0) # for training, only penalize the spline part\n",
      "C:\\Users\\vgiov\\OneDrive\\Documents\\Master Data Science\\Thesis\\pykan\\kan\\MultKAN.py:828: UserWarning: std(): degrees of freedom is <= 0. Correction should be strictly less than the reduction factor (input numel divided by output numel). (Triggered internally at C:\\cb\\pytorch_1000000000000\\work\\aten\\src\\ATen\\native\\ReduceOps.cpp:1823.)\n",
      "  output_range = torch.std(postacts, dim=0) # for visualization, include the contribution from both spline + symbolic\n",
      "C:\\Users\\vgiov\\OneDrive\\Documents\\Master Data Science\\Thesis\\pykan\\kan\\MultKAN.py:816: UserWarning: std(): degrees of freedom is <= 0. Correction should be strictly less than the reduction factor (input numel divided by output numel). (Triggered internally at C:\\cb\\pytorch_1000000000000\\work\\aten\\src\\ATen\\native\\ReduceOps.cpp:1823.)\n",
      "  self.subnode_actscale.append(torch.std(x, dim=0).detach())\n",
      "C:\\Users\\vgiov\\OneDrive\\Documents\\Master Data Science\\Thesis\\pykan\\kan\\MultKAN.py:826: UserWarning: std(): degrees of freedom is <= 0. Correction should be strictly less than the reduction factor (input numel divided by output numel). (Triggered internally at C:\\cb\\pytorch_1000000000000\\work\\aten\\src\\ATen\\native\\ReduceOps.cpp:1823.)\n",
      "  input_range = torch.std(preacts, dim=0) + 0.1\n",
      "C:\\Users\\vgiov\\OneDrive\\Documents\\Master Data Science\\Thesis\\pykan\\kan\\MultKAN.py:827: UserWarning: std(): degrees of freedom is <= 0. Correction should be strictly less than the reduction factor (input numel divided by output numel). (Triggered internally at C:\\cb\\pytorch_1000000000000\\work\\aten\\src\\ATen\\native\\ReduceOps.cpp:1823.)\n",
      "  output_range_spline = torch.std(postacts_numerical, dim=0) # for training, only penalize the spline part\n",
      "C:\\Users\\vgiov\\OneDrive\\Documents\\Master Data Science\\Thesis\\pykan\\kan\\MultKAN.py:828: UserWarning: std(): degrees of freedom is <= 0. Correction should be strictly less than the reduction factor (input numel divided by output numel). (Triggered internally at C:\\cb\\pytorch_1000000000000\\work\\aten\\src\\ATen\\native\\ReduceOps.cpp:1823.)\n",
      "  output_range = torch.std(postacts, dim=0) # for visualization, include the contribution from both spline + symbolic\n",
      "C:\\Users\\vgiov\\OneDrive\\Documents\\Master Data Science\\Thesis\\pykan\\kan\\MultKAN.py:816: UserWarning: std(): degrees of freedom is <= 0. Correction should be strictly less than the reduction factor (input numel divided by output numel). (Triggered internally at C:\\cb\\pytorch_1000000000000\\work\\aten\\src\\ATen\\native\\ReduceOps.cpp:1823.)\n",
      "  self.subnode_actscale.append(torch.std(x, dim=0).detach())\n",
      "C:\\Users\\vgiov\\OneDrive\\Documents\\Master Data Science\\Thesis\\pykan\\kan\\MultKAN.py:826: UserWarning: std(): degrees of freedom is <= 0. Correction should be strictly less than the reduction factor (input numel divided by output numel). (Triggered internally at C:\\cb\\pytorch_1000000000000\\work\\aten\\src\\ATen\\native\\ReduceOps.cpp:1823.)\n",
      "  input_range = torch.std(preacts, dim=0) + 0.1\n",
      "C:\\Users\\vgiov\\OneDrive\\Documents\\Master Data Science\\Thesis\\pykan\\kan\\MultKAN.py:827: UserWarning: std(): degrees of freedom is <= 0. Correction should be strictly less than the reduction factor (input numel divided by output numel). (Triggered internally at C:\\cb\\pytorch_1000000000000\\work\\aten\\src\\ATen\\native\\ReduceOps.cpp:1823.)\n",
      "  output_range_spline = torch.std(postacts_numerical, dim=0) # for training, only penalize the spline part\n",
      "C:\\Users\\vgiov\\OneDrive\\Documents\\Master Data Science\\Thesis\\pykan\\kan\\MultKAN.py:828: UserWarning: std(): degrees of freedom is <= 0. Correction should be strictly less than the reduction factor (input numel divided by output numel). (Triggered internally at C:\\cb\\pytorch_1000000000000\\work\\aten\\src\\ATen\\native\\ReduceOps.cpp:1823.)\n",
      "  output_range = torch.std(postacts, dim=0) # for visualization, include the contribution from both spline + symbolic\n",
      "C:\\Users\\vgiov\\OneDrive\\Documents\\Master Data Science\\Thesis\\pykan\\kan\\MultKAN.py:816: UserWarning: std(): degrees of freedom is <= 0. Correction should be strictly less than the reduction factor (input numel divided by output numel). (Triggered internally at C:\\cb\\pytorch_1000000000000\\work\\aten\\src\\ATen\\native\\ReduceOps.cpp:1823.)\n",
      "  self.subnode_actscale.append(torch.std(x, dim=0).detach())\n",
      "C:\\Users\\vgiov\\OneDrive\\Documents\\Master Data Science\\Thesis\\pykan\\kan\\MultKAN.py:826: UserWarning: std(): degrees of freedom is <= 0. Correction should be strictly less than the reduction factor (input numel divided by output numel). (Triggered internally at C:\\cb\\pytorch_1000000000000\\work\\aten\\src\\ATen\\native\\ReduceOps.cpp:1823.)\n",
      "  input_range = torch.std(preacts, dim=0) + 0.1\n",
      "C:\\Users\\vgiov\\OneDrive\\Documents\\Master Data Science\\Thesis\\pykan\\kan\\MultKAN.py:827: UserWarning: std(): degrees of freedom is <= 0. Correction should be strictly less than the reduction factor (input numel divided by output numel). (Triggered internally at C:\\cb\\pytorch_1000000000000\\work\\aten\\src\\ATen\\native\\ReduceOps.cpp:1823.)\n",
      "  output_range_spline = torch.std(postacts_numerical, dim=0) # for training, only penalize the spline part\n",
      "C:\\Users\\vgiov\\OneDrive\\Documents\\Master Data Science\\Thesis\\pykan\\kan\\MultKAN.py:828: UserWarning: std(): degrees of freedom is <= 0. Correction should be strictly less than the reduction factor (input numel divided by output numel). (Triggered internally at C:\\cb\\pytorch_1000000000000\\work\\aten\\src\\ATen\\native\\ReduceOps.cpp:1823.)\n",
      "  output_range = torch.std(postacts, dim=0) # for visualization, include the contribution from both spline + symbolic\n",
      "C:\\Users\\vgiov\\OneDrive\\Documents\\Master Data Science\\Thesis\\pykan\\kan\\MultKAN.py:816: UserWarning: std(): degrees of freedom is <= 0. Correction should be strictly less than the reduction factor (input numel divided by output numel). (Triggered internally at C:\\cb\\pytorch_1000000000000\\work\\aten\\src\\ATen\\native\\ReduceOps.cpp:1823.)\n",
      "  self.subnode_actscale.append(torch.std(x, dim=0).detach())\n",
      "C:\\Users\\vgiov\\OneDrive\\Documents\\Master Data Science\\Thesis\\pykan\\kan\\MultKAN.py:826: UserWarning: std(): degrees of freedom is <= 0. Correction should be strictly less than the reduction factor (input numel divided by output numel). (Triggered internally at C:\\cb\\pytorch_1000000000000\\work\\aten\\src\\ATen\\native\\ReduceOps.cpp:1823.)\n",
      "  input_range = torch.std(preacts, dim=0) + 0.1\n",
      "C:\\Users\\vgiov\\OneDrive\\Documents\\Master Data Science\\Thesis\\pykan\\kan\\MultKAN.py:827: UserWarning: std(): degrees of freedom is <= 0. Correction should be strictly less than the reduction factor (input numel divided by output numel). (Triggered internally at C:\\cb\\pytorch_1000000000000\\work\\aten\\src\\ATen\\native\\ReduceOps.cpp:1823.)\n",
      "  output_range_spline = torch.std(postacts_numerical, dim=0) # for training, only penalize the spline part\n",
      "C:\\Users\\vgiov\\OneDrive\\Documents\\Master Data Science\\Thesis\\pykan\\kan\\MultKAN.py:828: UserWarning: std(): degrees of freedom is <= 0. Correction should be strictly less than the reduction factor (input numel divided by output numel). (Triggered internally at C:\\cb\\pytorch_1000000000000\\work\\aten\\src\\ATen\\native\\ReduceOps.cpp:1823.)\n",
      "  output_range = torch.std(postacts, dim=0) # for visualization, include the contribution from both spline + symbolic\n",
      "C:\\Users\\vgiov\\OneDrive\\Documents\\Master Data Science\\Thesis\\pykan\\kan\\MultKAN.py:816: UserWarning: std(): degrees of freedom is <= 0. Correction should be strictly less than the reduction factor (input numel divided by output numel). (Triggered internally at C:\\cb\\pytorch_1000000000000\\work\\aten\\src\\ATen\\native\\ReduceOps.cpp:1823.)\n",
      "  self.subnode_actscale.append(torch.std(x, dim=0).detach())\n",
      "C:\\Users\\vgiov\\OneDrive\\Documents\\Master Data Science\\Thesis\\pykan\\kan\\MultKAN.py:826: UserWarning: std(): degrees of freedom is <= 0. Correction should be strictly less than the reduction factor (input numel divided by output numel). (Triggered internally at C:\\cb\\pytorch_1000000000000\\work\\aten\\src\\ATen\\native\\ReduceOps.cpp:1823.)\n",
      "  input_range = torch.std(preacts, dim=0) + 0.1\n",
      "C:\\Users\\vgiov\\OneDrive\\Documents\\Master Data Science\\Thesis\\pykan\\kan\\MultKAN.py:827: UserWarning: std(): degrees of freedom is <= 0. Correction should be strictly less than the reduction factor (input numel divided by output numel). (Triggered internally at C:\\cb\\pytorch_1000000000000\\work\\aten\\src\\ATen\\native\\ReduceOps.cpp:1823.)\n",
      "  output_range_spline = torch.std(postacts_numerical, dim=0) # for training, only penalize the spline part\n",
      "C:\\Users\\vgiov\\OneDrive\\Documents\\Master Data Science\\Thesis\\pykan\\kan\\MultKAN.py:828: UserWarning: std(): degrees of freedom is <= 0. Correction should be strictly less than the reduction factor (input numel divided by output numel). (Triggered internally at C:\\cb\\pytorch_1000000000000\\work\\aten\\src\\ATen\\native\\ReduceOps.cpp:1823.)\n",
      "  output_range = torch.std(postacts, dim=0) # for visualization, include the contribution from both spline + symbolic\n",
      "C:\\Users\\vgiov\\OneDrive\\Documents\\Master Data Science\\Thesis\\pykan\\kan\\MultKAN.py:816: UserWarning: std(): degrees of freedom is <= 0. Correction should be strictly less than the reduction factor (input numel divided by output numel). (Triggered internally at C:\\cb\\pytorch_1000000000000\\work\\aten\\src\\ATen\\native\\ReduceOps.cpp:1823.)\n",
      "  self.subnode_actscale.append(torch.std(x, dim=0).detach())\n",
      "C:\\Users\\vgiov\\OneDrive\\Documents\\Master Data Science\\Thesis\\pykan\\kan\\MultKAN.py:826: UserWarning: std(): degrees of freedom is <= 0. Correction should be strictly less than the reduction factor (input numel divided by output numel). (Triggered internally at C:\\cb\\pytorch_1000000000000\\work\\aten\\src\\ATen\\native\\ReduceOps.cpp:1823.)\n",
      "  input_range = torch.std(preacts, dim=0) + 0.1\n",
      "C:\\Users\\vgiov\\OneDrive\\Documents\\Master Data Science\\Thesis\\pykan\\kan\\MultKAN.py:827: UserWarning: std(): degrees of freedom is <= 0. Correction should be strictly less than the reduction factor (input numel divided by output numel). (Triggered internally at C:\\cb\\pytorch_1000000000000\\work\\aten\\src\\ATen\\native\\ReduceOps.cpp:1823.)\n",
      "  output_range_spline = torch.std(postacts_numerical, dim=0) # for training, only penalize the spline part\n",
      "C:\\Users\\vgiov\\OneDrive\\Documents\\Master Data Science\\Thesis\\pykan\\kan\\MultKAN.py:828: UserWarning: std(): degrees of freedom is <= 0. Correction should be strictly less than the reduction factor (input numel divided by output numel). (Triggered internally at C:\\cb\\pytorch_1000000000000\\work\\aten\\src\\ATen\\native\\ReduceOps.cpp:1823.)\n",
      "  output_range = torch.std(postacts, dim=0) # for visualization, include the contribution from both spline + symbolic\n",
      "C:\\Users\\vgiov\\OneDrive\\Documents\\Master Data Science\\Thesis\\pykan\\kan\\MultKAN.py:816: UserWarning: std(): degrees of freedom is <= 0. Correction should be strictly less than the reduction factor (input numel divided by output numel). (Triggered internally at C:\\cb\\pytorch_1000000000000\\work\\aten\\src\\ATen\\native\\ReduceOps.cpp:1823.)\n",
      "  self.subnode_actscale.append(torch.std(x, dim=0).detach())\n",
      "C:\\Users\\vgiov\\OneDrive\\Documents\\Master Data Science\\Thesis\\pykan\\kan\\MultKAN.py:826: UserWarning: std(): degrees of freedom is <= 0. Correction should be strictly less than the reduction factor (input numel divided by output numel). (Triggered internally at C:\\cb\\pytorch_1000000000000\\work\\aten\\src\\ATen\\native\\ReduceOps.cpp:1823.)\n",
      "  input_range = torch.std(preacts, dim=0) + 0.1\n",
      "C:\\Users\\vgiov\\OneDrive\\Documents\\Master Data Science\\Thesis\\pykan\\kan\\MultKAN.py:827: UserWarning: std(): degrees of freedom is <= 0. Correction should be strictly less than the reduction factor (input numel divided by output numel). (Triggered internally at C:\\cb\\pytorch_1000000000000\\work\\aten\\src\\ATen\\native\\ReduceOps.cpp:1823.)\n",
      "  output_range_spline = torch.std(postacts_numerical, dim=0) # for training, only penalize the spline part\n",
      "C:\\Users\\vgiov\\OneDrive\\Documents\\Master Data Science\\Thesis\\pykan\\kan\\MultKAN.py:828: UserWarning: std(): degrees of freedom is <= 0. Correction should be strictly less than the reduction factor (input numel divided by output numel). (Triggered internally at C:\\cb\\pytorch_1000000000000\\work\\aten\\src\\ATen\\native\\ReduceOps.cpp:1823.)\n",
      "  output_range = torch.std(postacts, dim=0) # for visualization, include the contribution from both spline + symbolic\n",
      "C:\\Users\\vgiov\\OneDrive\\Documents\\Master Data Science\\Thesis\\pykan\\kan\\MultKAN.py:816: UserWarning: std(): degrees of freedom is <= 0. Correction should be strictly less than the reduction factor (input numel divided by output numel). (Triggered internally at C:\\cb\\pytorch_1000000000000\\work\\aten\\src\\ATen\\native\\ReduceOps.cpp:1823.)\n",
      "  self.subnode_actscale.append(torch.std(x, dim=0).detach())\n",
      "C:\\Users\\vgiov\\OneDrive\\Documents\\Master Data Science\\Thesis\\pykan\\kan\\MultKAN.py:826: UserWarning: std(): degrees of freedom is <= 0. Correction should be strictly less than the reduction factor (input numel divided by output numel). (Triggered internally at C:\\cb\\pytorch_1000000000000\\work\\aten\\src\\ATen\\native\\ReduceOps.cpp:1823.)\n",
      "  input_range = torch.std(preacts, dim=0) + 0.1\n",
      "C:\\Users\\vgiov\\OneDrive\\Documents\\Master Data Science\\Thesis\\pykan\\kan\\MultKAN.py:827: UserWarning: std(): degrees of freedom is <= 0. Correction should be strictly less than the reduction factor (input numel divided by output numel). (Triggered internally at C:\\cb\\pytorch_1000000000000\\work\\aten\\src\\ATen\\native\\ReduceOps.cpp:1823.)\n",
      "  output_range_spline = torch.std(postacts_numerical, dim=0) # for training, only penalize the spline part\n",
      "C:\\Users\\vgiov\\OneDrive\\Documents\\Master Data Science\\Thesis\\pykan\\kan\\MultKAN.py:828: UserWarning: std(): degrees of freedom is <= 0. Correction should be strictly less than the reduction factor (input numel divided by output numel). (Triggered internally at C:\\cb\\pytorch_1000000000000\\work\\aten\\src\\ATen\\native\\ReduceOps.cpp:1823.)\n",
      "  output_range = torch.std(postacts, dim=0) # for visualization, include the contribution from both spline + symbolic\n",
      "C:\\Users\\vgiov\\OneDrive\\Documents\\Master Data Science\\Thesis\\pykan\\kan\\MultKAN.py:816: UserWarning: std(): degrees of freedom is <= 0. Correction should be strictly less than the reduction factor (input numel divided by output numel). (Triggered internally at C:\\cb\\pytorch_1000000000000\\work\\aten\\src\\ATen\\native\\ReduceOps.cpp:1823.)\n",
      "  self.subnode_actscale.append(torch.std(x, dim=0).detach())\n",
      "C:\\Users\\vgiov\\OneDrive\\Documents\\Master Data Science\\Thesis\\pykan\\kan\\MultKAN.py:826: UserWarning: std(): degrees of freedom is <= 0. Correction should be strictly less than the reduction factor (input numel divided by output numel). (Triggered internally at C:\\cb\\pytorch_1000000000000\\work\\aten\\src\\ATen\\native\\ReduceOps.cpp:1823.)\n",
      "  input_range = torch.std(preacts, dim=0) + 0.1\n",
      "C:\\Users\\vgiov\\OneDrive\\Documents\\Master Data Science\\Thesis\\pykan\\kan\\MultKAN.py:827: UserWarning: std(): degrees of freedom is <= 0. Correction should be strictly less than the reduction factor (input numel divided by output numel). (Triggered internally at C:\\cb\\pytorch_1000000000000\\work\\aten\\src\\ATen\\native\\ReduceOps.cpp:1823.)\n",
      "  output_range_spline = torch.std(postacts_numerical, dim=0) # for training, only penalize the spline part\n",
      "C:\\Users\\vgiov\\OneDrive\\Documents\\Master Data Science\\Thesis\\pykan\\kan\\MultKAN.py:828: UserWarning: std(): degrees of freedom is <= 0. Correction should be strictly less than the reduction factor (input numel divided by output numel). (Triggered internally at C:\\cb\\pytorch_1000000000000\\work\\aten\\src\\ATen\\native\\ReduceOps.cpp:1823.)\n",
      "  output_range = torch.std(postacts, dim=0) # for visualization, include the contribution from both spline + symbolic\n",
      "C:\\Users\\vgiov\\OneDrive\\Documents\\Master Data Science\\Thesis\\pykan\\kan\\MultKAN.py:816: UserWarning: std(): degrees of freedom is <= 0. Correction should be strictly less than the reduction factor (input numel divided by output numel). (Triggered internally at C:\\cb\\pytorch_1000000000000\\work\\aten\\src\\ATen\\native\\ReduceOps.cpp:1823.)\n",
      "  self.subnode_actscale.append(torch.std(x, dim=0).detach())\n",
      "C:\\Users\\vgiov\\OneDrive\\Documents\\Master Data Science\\Thesis\\pykan\\kan\\MultKAN.py:826: UserWarning: std(): degrees of freedom is <= 0. Correction should be strictly less than the reduction factor (input numel divided by output numel). (Triggered internally at C:\\cb\\pytorch_1000000000000\\work\\aten\\src\\ATen\\native\\ReduceOps.cpp:1823.)\n",
      "  input_range = torch.std(preacts, dim=0) + 0.1\n",
      "C:\\Users\\vgiov\\OneDrive\\Documents\\Master Data Science\\Thesis\\pykan\\kan\\MultKAN.py:827: UserWarning: std(): degrees of freedom is <= 0. Correction should be strictly less than the reduction factor (input numel divided by output numel). (Triggered internally at C:\\cb\\pytorch_1000000000000\\work\\aten\\src\\ATen\\native\\ReduceOps.cpp:1823.)\n",
      "  output_range_spline = torch.std(postacts_numerical, dim=0) # for training, only penalize the spline part\n",
      "C:\\Users\\vgiov\\OneDrive\\Documents\\Master Data Science\\Thesis\\pykan\\kan\\MultKAN.py:828: UserWarning: std(): degrees of freedom is <= 0. Correction should be strictly less than the reduction factor (input numel divided by output numel). (Triggered internally at C:\\cb\\pytorch_1000000000000\\work\\aten\\src\\ATen\\native\\ReduceOps.cpp:1823.)\n",
      "  output_range = torch.std(postacts, dim=0) # for visualization, include the contribution from both spline + symbolic\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Training completed in 2796.83 seconds\n",
      "Best epoch: 2/15\n",
      "Train Loss: 2787.9627, Val Loss: 3859.4003, Test Loss: 3437.9582\n"
     ]
    },
    {
     "ename": "FileNotFoundError",
     "evalue": "[Errno 2] No such file or directory: 'logs/Regression/TINTO/LBFGS/TINTO_Model1/metrics.txt'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[15], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m metrics \u001b[38;5;241m=\u001b[39m compile_and_fit(model, train_loader, val_loader, test_loader, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mTINTO\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mTINTO_Model1\u001b[39m\u001b[38;5;124m\"\u001b[39m, batch_size\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m32\u001b[39m, epochs\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m15\u001b[39m)\n",
      "Cell \u001b[1;32mIn[14], line 70\u001b[0m, in \u001b[0;36mcompile_and_fit\u001b[1;34m(model, train_loader, val_loader, test_loader, dataset_name, model_name, batch_size, epochs, device, history_freq)\u001b[0m\n\u001b[0;32m     67\u001b[0m os\u001b[38;5;241m.\u001b[39mmakedirs(os\u001b[38;5;241m.\u001b[39mpath\u001b[38;5;241m.\u001b[39mdirname(save_path), exist_ok\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n\u001b[0;32m     68\u001b[0m torch\u001b[38;5;241m.\u001b[39msave(best_model, save_path)\n\u001b[1;32m---> 70\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m \u001b[38;5;28mopen\u001b[39m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mlogs/Regression/\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mdataset_name\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m/LBFGS/\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mmodel_name\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m/metrics.txt\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mw\u001b[39m\u001b[38;5;124m\"\u001b[39m) \u001b[38;5;28;01mas\u001b[39;00m f:\n\u001b[0;32m     71\u001b[0m     \u001b[38;5;28;01mfor\u001b[39;00m key, value \u001b[38;5;129;01min\u001b[39;00m metrics\u001b[38;5;241m.\u001b[39mitems():\n\u001b[0;32m     72\u001b[0m         f\u001b[38;5;241m.\u001b[39mwrite(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mkey\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m: \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mvalue\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m\"\u001b[39m)\n",
      "File \u001b[1;32m~\\anaconda3\\envs\\env_torch_12\\Lib\\site-packages\\IPython\\core\\interactiveshell.py:324\u001b[0m, in \u001b[0;36m_modified_open\u001b[1;34m(file, *args, **kwargs)\u001b[0m\n\u001b[0;32m    317\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m file \u001b[38;5;129;01min\u001b[39;00m {\u001b[38;5;241m0\u001b[39m, \u001b[38;5;241m1\u001b[39m, \u001b[38;5;241m2\u001b[39m}:\n\u001b[0;32m    318\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[0;32m    319\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mIPython won\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mt let you open fd=\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mfile\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m by default \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m    320\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mas it is likely to crash IPython. If you know what you are doing, \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m    321\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124myou can use builtins\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m open.\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m    322\u001b[0m     )\n\u001b[1;32m--> 324\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m io_open(file, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n",
      "\u001b[1;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: 'logs/Regression/TINTO/LBFGS/TINTO_Model1/metrics.txt'"
     ]
    }
   ],
   "source": [
    "metrics = compile_and_fit(model, train_loader, val_loader, test_loader, \"TINTO\", \"TINTO_Model1\", batch_size=32, epochs=15)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "af7970d1-0dfe-47e8-a4ff-a7d5d5fc1928",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'train_loss': 2695.5791957689366,\n",
       " 'train_mse': 2798.2485,\n",
       " 'train_mae': 43.76227,\n",
       " 'train_rmse': 52.898476,\n",
       " 'train_r2': 0.4948774576187134,\n",
       " 'val_loss': 4507.66552734375,\n",
       " 'val_mse': 4523.1704,\n",
       " 'val_mae': 53.77361,\n",
       " 'val_rmse': 67.25452,\n",
       " 'val_r2': 0.4281688928604126,\n",
       " 'test_loss': 3752.16650390625,\n",
       " 'test_mse': 3793.6548,\n",
       " 'test_mae': 50.333622,\n",
       " 'test_rmse': 61.59265,\n",
       " 'test_r2': 0.3792951703071594,\n",
       " 'min_lr': 0.0001,\n",
       " 'max_lr': 0.004,\n",
       " 'total_time': 532.0670211315155,\n",
       " 'average_epoch_time': 13.301675528287888}"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "metrics"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b388a782-5e5e-4dc9-8b63-f729f4135fda",
   "metadata": {},
   "source": [
    "# 5. Plot Kan internal branch of the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "a0a82b00-dd99-4825-a55b-f524882326e3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 500x600 with 92 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "9b374439-a0f9-440c-bb93-4bc4d6821745",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([0.2293, 0.2467, 0.7773, 0.7444, 0.1353, 0.0912, 0.1203, 0.3382, 0.4215,\n",
       "        0.4517], device='cuda:0', grad_fn=<MeanBackward1>)"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.feature_score"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
